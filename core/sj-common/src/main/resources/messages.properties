rest.errors.internal_server_error=Internal server error: {0}.
rest.errors.unrecognized_property=Unknown property ''{0}'' for the data provided in the request. ''{1}'' are expected.
rest.errors.invalid.specification=Specification.json is not found or invalid.
rest.errors.large_file=File is too big.
rest.errors.entity.json.schema.failed=Input entity fails to meet a json schema: ''{0}''

rest.modules.module.uploaded=Jar file ''{0}'' of module has been uploaded.
rest.modules.module.cannot.upload=Cannot upload jar file ''{0}'' of module. Errors: {1}.
rest.modules.module.exists=module ''{0}'' already exists
rest.modules.module.file.exists=file ''{0}'' already exists
rest.modules.modules.extension.unknown=file ''{0}'' does not have the .jar extension
rest.modules.module.deleted=Module ''{0}'' has been deleted.
rest.modules.module.cannot.delete=It''s impossible to delete module ''{0}''. Module has instances.
rest.cannot.delete.file=Cannot delete file ''{0}''.
rest.modules.module.notfound=Module ''{0}'' has not been found.
rest.modules.module.jar.notfound=Jar of module ''{0}'' has not been found in the storage.
rest.modules.module.jar.incorrect=File ''{0}'' not a jar archive
rest.modules.module.classloader.error=Cannot get class loader from ''{0}''.
rest.modules.module.instances.instance.notfound=Instance ''{0}'' has not been found.
rest.modules.instances.instance.created=Instance ''{0}'' for module ''{1}'' has been created.
rest.modules.instances.instance.cannot.create.incorrect.parameters=Cannot create an instance of a module. The instance parameters haven''t passed validation, \
  which are declared in the methods, called ''validate'' (with different arguments). \
  These methods are owned by a validator class that implements StreamingValidator interface. Errors: {0}.
rest.modules.instances.instance.cannot.create=Cannot create instance of module. Errors: {0}.
rest.modules.instances.instance.deleting=Instance ''{0}'' is being deleted.
rest.modules.instances.instance.deleted=Instance ''{0}'' has been deleted.
rest.modules.instances.instance.cannot.delete=Cannot delete of instance ''{0}''. Instance is not been stopped, failed or ready.
rest.modules.instances.instance.starting=Instance ''{0}'' is being launched.
rest.modules.instances.instance.cannot.start=Cannot start of instance. Instance has already launched.
rest.modules.instances.instance.stopping=Instance ''{0}'' is being stopped.
rest.modules.instances.instance.cannot.stop=Cannot stop instance. Instance has not been started.
rest.modules.instances.instance.cannot.get.tasks=Cannot get instance framework tasks info. The instance framework has not been launched.
rest.modules.instances.instance.exists=Instance ''{0}'' already exists
rest.modules.type.unknown=Module type ''{0}'' does not exist.
rest.modules.specification.json.not.found=Specification.json is not found in module jar.
json.schema.not.found=Json schema is not found.
json.deserialization.error=Json deserialization error: ''{0}''
json.deserialization.error.unrecognized.property=Json contains unrecognized property ''{0}''
json.deserialization.error.incorrect.value=Json contains incorrect value in property ''{0}''
json.deserialization.error.not.parsed=Cannot parse json: ''{0}''

rest.custom.jars.file.exists=Custom jar ''{0}'' already exists.
rest.custom.jars.cannot.upload=Cannot upload custom jar. Errors: {0}.
rest.custom.jars.exists=Custom jar with name ''{0}'' and version ''{1}'' already exists.
rest.custom.jars.file.uploaded=Custom jar ''{0}'' has been uploaded.
rest.custom.jars.file.notfound=Jar ''{0}'' has not been found.
rest.custom.jars.file.deleted=Jar named ''{0}'' of the version ''{1}'' has been deleted.
rest.custom.jars.file.deleted.by.filename=Jar named ''{0}'' has been deleted.

rest.custom.files.file.exists=Custom file ''{0}'' already exists.
rest.custom.files.file.uploaded=Custom file ''{0}'' has been uploaded.
rest.custom.files.file.deleted=Custom file ''{0}'' has been deleted.
rest.custom.files.file.notfound=Custom file ''{0}'' has not been found.
rest.custom.files.file.missing=Request is missing required form field 'file'.

rest.providers.provider.created=Provider ''{0}'' has been created.
rest.providers.provider.cannot.create=Cannot create provider. Errors: {0}.
rest.providers.provider.deleted=Provider ''{0}'' has been deleted.
rest.providers.provider.cannot.delete=Cannot delete provider ''{0}''. Provider is used in services.
rest.providers.provider.notfound=Provider ''{0}'' has not been found.

rest.services.service.created=Service ''{0}'' has been created.
rest.services.service.cannot.create=Cannot create service. Errors: {0}.
rest.services.service.deleted=Service ''{0}'' has been deleted.
rest.services.service.cannot.delete.due.to.streams=Cannot delete service ''{0}''. Service is used in streams.
rest.services.service.cannot.delete.due.to.instances=Cannot delete service ''{0}''. Service is used in instances.
rest.services.service.notfound=Service ''{0}'' has not been found.

rest.streams.stream.created=Stream ''{0}'' has been  created.
rest.streams.stream.cannot.create=Cannot create stream. Errors: {0}.
rest.streams.stream.deleted=Stream ''{0}'' has been deleted.
rest.streams.stream.cannot.delete=Cannot delete stream ''{0}''. Stream is used in instances.
rest.streams.stream.notfound=Stream ''{0}'' has not been found.

rest.config.setting.domain.unknown=Cannot recognize config setting domain ''{0}''. Domain must be one of the following values: ''{1}''.
rest.config.setting.created=Config setting ''{0}'' has been  created.
rest.config.setting.cannot.create=Cannot create config setting. Errors: {0}.
rest.config.setting.deleted=Config setting ''{0}'' has been deleted.
rest.config.setting.notfound=Config setting ''{0}'' has not been found.

rest.validator.attribute.required=''{0}'' attribute is required
rest.validator.attribute.unknown.value=Unknown value of ''{0}'' attribute: ''{1}''
rest.validator.attribute.must.one_of=''{0}'' must be one of: {1}
rest.validator.attribute.must.greater.or.equal=''{0}'' attribute must be greater or equal than ''{1}''
rest.validator.attribute.must.greater.than.zero=''{0}'' attribute must be greater than zero
rest.validator.attribute.must.greater.or.equal.zero=''{0}'' attribute must be greater than zero or equal to zero
rest.validator.attribute.must.from.to=''{0}'' must be in the interval from {1} to {2}
rest.validator.attribute.must.if.instance.have=''{0}'' attribute must be one of: {1}, if instance inputs have the kafka-streams
rest.validator.attribute.not.one.of=''{0}'' attribute is not one of: {1}
rest.validator.attribute.must.greater.than.backups=''{0}'' must be greater than the total number of backups
rest.validator.attribute.not=''{0}'' attribute is not ''{1}''

rest.validator.cardinality.cannot.less=Count of {0} cannot be less than {1}
rest.validator.cardinality.cannot.more=Count of {0} cannot be more than {1}
rest.validator.sources.not.unique=''{0}'' contain the non-unique streams
rest.validator.source_stream.not.exist={0} stream ''{1}'' does not exist
rest.validator.source_stream.must.one.of={0} streams must be one of the following type: {1}

rest.validator.t_stream.same.service=All t-streams should have the same service
rest.validator.service.must=Service for {0} must be ''{1}''
rest.validator.parameter.unknown.type=Unknown type of ''{0}'' parameter. Must be a {1}

rest.validator.not.exist={0} does not exist
rest.validator.attribute.must.greater.than.parallelism=''Parallelism'' ({0}) is greater than minimum of partitions count ({1}) of input streams
rest.validator.unknown.stream.mode=Unknown stream mode. Input streams must have one of mode: {0}

rest.validator.specification.attribute.required=''{0}'' attribute of the specification.json is required
rest.validator.specification.attribute.must.one.of=''{0}'' attribute of the specification.json must be one of {1}
rest.validator.specification.cardinality=cardinality in ''{0}'' attribute of the specification.json must contain 2 elements
rest.validator.specification.both.cardinality=both of cardinality of ''{0}'' in the specification.json must to be equal {1}
rest.validator.specification.input.type=''inputs'' attribute in specification.json must contain only one string: ''{0}''
rest.validator.specification.cardinality.left.bound.greater.zero=cardinality of ''{0}'' in the specification.json has to be \
  an interval with the left bound that is greater than zero
rest.validator.specification.sources.t-stream.kafka=''{0}'' attribute in the specification.json must have the streams of t-stream and kafka type
rest.validator.specification.sources.es.jdbc.rest=''{0}'' attribute in the specification.json must have the streams of elasticsearch, jdbc or rest type
rest.validator.specification.class.should.implement=''{0}'' attribute in specification.json is invalid - a ''{1}'' should implement ''{2}''
rest.validator.specification.invalid.engine.params=''engine-name'' and ''engine-version'' attributes in specification.json is invalid
rest.validator.specification.class.not.found=class ''{0}'' indicated in ''{1}'' attribute of the specification.json isn''t found

entity.error.attribute.required=''{0}'' attribute is required
entity.error.already.exists={0} with name ''{1}'' already exists
entity.error.incorrect.name={0} has incorrect name: ''{1}''. \
  Name of {2} must contain digits, lowercase letters or hyphens. First symbol must be a letter
entity.error.incorrect.config.name=Config setting has incorrect name: ''{0}''. \
  Name of config setting can contain digits, lowercase letters, hyphens or periods. First symbol must be a letter
entity.error.incorrect.name.tstreams.domain={0} has incorrect name: ''{1}''. \
  T-streams domain config setting must be only for consumer or producer
entity.error.unknown.type.must.one.of=Unknown type ''{0}'' of {1} provided. Must be one of: {2}
entity.error.hosts.should.be.non.empty='Hosts' must contain at least one host
entity.error.wrong.host=Wrong host provided: ''{0}''
entity.error.host.should.not.contain.uri=Host cannot contain any uri path (''{0}'')
entity.error.host.must.contains.port=Host ''{0}'' must contain port
entity.error.incorrect.service.namespace=Service has incorrect ''{0}'': ''{1}''. \
  Name must contain digits, lowercase letters or underscore. First symbol must be a letter
entity.error.incorrect.service.prefix=Service has incorrect ''prefix'': ''{0}''. Prefix must be a valid znode path (error: {1})
entity.error.incorrect.service.token=Service has incorrect ''token'': ''{0}''. \
  Token must contain no more than 32 symbols
entity.error.doesnot.exist={0} ''{1}'' does not exist
entity.error.must.one.type.other.given=''{0}'' must be of type: ''{1}'' (''{2}'' is given instead)
entity.error.attribute.must.be.positive.integer=''{0}'' must be a positive integer
entity.error.mismatch.partitions=Partitions count of stream ''{0}'' mismatch. Stream partitions ({1}) mismatch with partitions of existent stream ({2})
entity.error.attribute.must=Attribute ''{0}''  must {1}
entity.error.attribute.must.one_of=Attribute ''{0}'' must be one of: {1}
entity.error.config.required=Config setting ''{0}'' is required
entity.error.file.required=Custom file ''{0}'' is required
entity.error.jdbc.incorrect.prefix=Prefix ''{0}'' in config setting ''{1}'' is incorrect
entity.error.jdbc.incorrect.stream.name=Stream has incorrect name: ''{0}''. \
  Name must contain digits, lowercase letters or underscore. First symbol must be a letter

error.cannot.create.client=Can not create client: ''{0}''
